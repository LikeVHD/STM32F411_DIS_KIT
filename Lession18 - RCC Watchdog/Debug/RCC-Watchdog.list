
RCC-Watchdog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000314  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ac  080004ac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004ac  080004ac  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004ac  080004ac  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004ac  080004ac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ac  080004ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004b4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004b8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004b8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001100  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004b2  00000000  00000000  00021134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  000215e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  000217c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c2a  00000000  00000000  00021950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f6d  00000000  00000000  0003557a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e6d5  00000000  00000000  000374e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5bbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005a0  00000000  00000000  000b5c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000494 	.word	0x08000494

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000494 	.word	0x08000494

080001d8 <clock_Init>:
/**
 *@brief: Set clock 100MHz for system use PLL.
 */

void clock_Init()
{
 80001d8:	b480      	push	{r7}
 80001da:	b087      	sub	sp, #28
 80001dc:	af00      	add	r7, sp, #0
	uint32_t *RCC_CR = (uint32_t*)0x40023800;
 80001de:	4b34      	ldr	r3, [pc, #208]	; (80002b0 <clock_Init+0xd8>)
 80001e0:	617b      	str	r3, [r7, #20]
	uint32_t *RCC_PLLCFGR = (uint32_t*)0x40023804;
 80001e2:	4b34      	ldr	r3, [pc, #208]	; (80002b4 <clock_Init+0xdc>)
 80001e4:	613b      	str	r3, [r7, #16]
	uint32_t *RCC_CFGR = (uint32_t*)0x40023808;
 80001e6:	4b34      	ldr	r3, [pc, #208]	; (80002b8 <clock_Init+0xe0>)
 80001e8:	60fb      	str	r3, [r7, #12]

	*RCC_CR |= 1U << 16U;			// HSE clock enable
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	601a      	str	r2, [r3, #0]
	while (!((*RCC_CR >> 17) & 1));	// Wait until HSE clock ready flag
 80001f6:	bf00      	nop
 80001f8:	697b      	ldr	r3, [r7, #20]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	0c5b      	lsrs	r3, r3, #17
 80001fe:	f003 0301 	and.w	r3, r3, #1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f8      	beq.n	80001f8 <clock_Init+0x20>

	*RCC_CR &= ~(1U << 24U);		// Disable before setup PLL
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	601a      	str	r2, [r3, #0]
	while (((*RCC_CR >> 25) & 1));	// Wait PLL is unlocked
 8000212:	bf00      	nop
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	0e5b      	lsrs	r3, r3, #25
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d1f8      	bne.n	8000214 <clock_Init+0x3c>


	*RCC_PLLCFGR |= (8U << 0);		// PLLM Division
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0208 	orr.w	r2, r3, #8
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	601a      	str	r2, [r3, #0]
	*RCC_PLLCFGR |= (200U << 6U);	// PLLN multiplication 200
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f443 5248 	orr.w	r2, r3, #12800	; 0x3200
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	601a      	str	r2, [r3, #0]
	*RCC_PLLCFGR |= (0U << 16);		// PLLP Division 2
 800023a:	693b      	ldr	r3, [r7, #16]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	601a      	str	r2, [r3, #0]
	*RCC_PLLCFGR |= (1U << 22U);	// HSE oscillator clock selected as PLL
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	601a      	str	r2, [r3, #0]
	*RCC_PLLCFGR |= (5U << 24U);	// PLLQ division 5
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 62a0 	orr.w	r2, r3, #83886080	; 0x5000000
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	601a      	str	r2, [r3, #0]

	*RCC_CR |= 1U << 24U;			// PLL enable
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	601a      	str	r2, [r3, #0]
//	while (((*RCC_CR >> 25) & 1));	// Wait until PLL clock ready flag

	*RCC_CFGR |= 4U << 10U;			// Set APB Low speed pre-scaler (APB1) = 50MHz
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	601a      	str	r2, [r3, #0]

	/*
		 * Set number of wait states according to CPU clock (HCLK) frequency
		 * Voltage range 2.7 V - 3.6 V -> 3 WS (4 CPU cycles) with 90 < HCLK â‰¤ 100
		 */
		uint32_t* FLASH_ACR = (uint32_t*)0x40023c00;
 8000272:	4b12      	ldr	r3, [pc, #72]	; (80002bc <clock_Init+0xe4>)
 8000274:	60bb      	str	r3, [r7, #8]
		*FLASH_ACR |= (3U << 0U);
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f043 0203 	orr.w	r2, r3, #3
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	601a      	str	r2, [r3, #0]

		const unsigned char clock_sw = 0b10;
 8000282:	2302      	movs	r3, #2
 8000284:	71fb      	strb	r3, [r7, #7]
		*RCC_CFGR |= clock_sw;					//select PLL as system clock
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	431a      	orrs	r2, r3
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	601a      	str	r2, [r3, #0]
		while((*RCC_CFGR & clock_sw) != clock_sw);
 8000292:	bf00      	nop
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	401a      	ands	r2, r3
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d1f8      	bne.n	8000294 <clock_Init+0xbc>
		/*
		 * AHB = 100Mhz (max)
		 * APB1 = 50Mhz (max)
		 * APB2 = 100Mhz (max)
		 */
}
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	371c      	adds	r7, #28
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40023804 	.word	0x40023804
 80002b8:	40023808 	.word	0x40023808
 80002bc:	40023c00 	.word	0x40023c00

080002c0 <led_Init>:

void led_Init()
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	uint32_t *RCC_AHB1ENR = (uint32_t*)0x40023830;
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <led_Init+0x3c>)
 80002c8:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR |= 1U << 3U;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0208 	orr.w	r2, r3, #8
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]

	GPIOD_MODER |= (1U << 24U);			// Set PD12 as output
 80002d6:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <led_Init+0x40>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a09      	ldr	r2, [pc, #36]	; (8000300 <led_Init+0x40>)
 80002dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002e0:	6013      	str	r3, [r2, #0]
	GPIOD_OTYPER &= ~(1U << 12U);
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <led_Init+0x44>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <led_Init+0x44>)
 80002e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002ec:	6013      	str	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023830 	.word	0x40023830
 8000300:	40020c00 	.word	0x40020c00
 8000304:	40020c04 	.word	0x40020c04

08000308 <led_Control>:

void led_Control(char state)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
	if(state)
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d006      	beq.n	8000326 <led_Control+0x1e>
		GPIOD_ODR |= 1U << 12U;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <led_Control+0x38>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a08      	ldr	r2, [pc, #32]	; (8000340 <led_Control+0x38>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6013      	str	r3, [r2, #0]
	else
		GPIOD_ODR &= ~(1U << 12U);
}
 8000324:	e005      	b.n	8000332 <led_Control+0x2a>
		GPIOD_ODR &= ~(1U << 12U);
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <led_Control+0x38>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a05      	ldr	r2, [pc, #20]	; (8000340 <led_Control+0x38>)
 800032c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000330:	6013      	str	r3, [r2, #0]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40020c14 	.word	0x40020c14

08000344 <main>:

int main (void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	clock_Init();
 8000348:	f7ff ff46 	bl	80001d8 <clock_Init>
	led_Init();
 800034c:	f7ff ffb8 	bl	80002c0 <led_Init>
	led_Control(0);
 8000350:	2000      	movs	r0, #0
 8000352:	f7ff ffd9 	bl	8000308 <led_Control>
//	GPIOD_ODR |= LED_GREEN;		// On red LED
//	led_Control(1);
	while (1)
 8000356:	e7fe      	b.n	8000356 <main+0x12>

08000358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800035c:	e7fe      	b.n	800035c <NMI_Handler+0x4>

0800035e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000362:	e7fe      	b.n	8000362 <HardFault_Handler+0x4>

08000364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <MemManage_Handler+0x4>

0800036a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800036e:	e7fe      	b.n	800036e <BusFault_Handler+0x4>

08000370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000374:	e7fe      	b.n	8000374 <UsageFault_Handler+0x4>

08000376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a4:	f000 f83e 	bl	8000424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}

080003ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <SystemInit+0x20>)
 80003b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003b6:	4a05      	ldr	r2, [pc, #20]	; (80003cc <SystemInit+0x20>)
 80003b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	e000ed00 	.word	0xe000ed00

080003d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000408 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003d4:	480d      	ldr	r0, [pc, #52]	; (800040c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003d6:	490e      	ldr	r1, [pc, #56]	; (8000410 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003d8:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003ec:	4c0b      	ldr	r4, [pc, #44]	; (800041c <LoopFillZerobss+0x26>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003fa:	f7ff ffd7 	bl	80003ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003fe:	f000 f825 	bl	800044c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000402:	f7ff ff9f 	bl	8000344 <main>
  bx  lr    
 8000406:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000410:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000414:	080004b4 	.word	0x080004b4
  ldr r2, =_sbss
 8000418:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800041c:	20000024 	.word	0x20000024

08000420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000420:	e7fe      	b.n	8000420 <ADC_IRQHandler>
	...

08000424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <HAL_IncTick+0x20>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	461a      	mov	r2, r3
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <HAL_IncTick+0x24>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4413      	add	r3, r2
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <HAL_IncTick+0x24>)
 8000436:	6013      	str	r3, [r2, #0]
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	20000000 	.word	0x20000000
 8000448:	20000020 	.word	0x20000020

0800044c <__libc_init_array>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	4d0d      	ldr	r5, [pc, #52]	; (8000484 <__libc_init_array+0x38>)
 8000450:	4c0d      	ldr	r4, [pc, #52]	; (8000488 <__libc_init_array+0x3c>)
 8000452:	1b64      	subs	r4, r4, r5
 8000454:	10a4      	asrs	r4, r4, #2
 8000456:	2600      	movs	r6, #0
 8000458:	42a6      	cmp	r6, r4
 800045a:	d109      	bne.n	8000470 <__libc_init_array+0x24>
 800045c:	4d0b      	ldr	r5, [pc, #44]	; (800048c <__libc_init_array+0x40>)
 800045e:	4c0c      	ldr	r4, [pc, #48]	; (8000490 <__libc_init_array+0x44>)
 8000460:	f000 f818 	bl	8000494 <_init>
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	10a4      	asrs	r4, r4, #2
 8000468:	2600      	movs	r6, #0
 800046a:	42a6      	cmp	r6, r4
 800046c:	d105      	bne.n	800047a <__libc_init_array+0x2e>
 800046e:	bd70      	pop	{r4, r5, r6, pc}
 8000470:	f855 3b04 	ldr.w	r3, [r5], #4
 8000474:	4798      	blx	r3
 8000476:	3601      	adds	r6, #1
 8000478:	e7ee      	b.n	8000458 <__libc_init_array+0xc>
 800047a:	f855 3b04 	ldr.w	r3, [r5], #4
 800047e:	4798      	blx	r3
 8000480:	3601      	adds	r6, #1
 8000482:	e7f2      	b.n	800046a <__libc_init_array+0x1e>
 8000484:	080004ac 	.word	0x080004ac
 8000488:	080004ac 	.word	0x080004ac
 800048c:	080004ac 	.word	0x080004ac
 8000490:	080004b0 	.word	0x080004b0

08000494 <_init>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	bf00      	nop
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr

080004a0 <_fini>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr
