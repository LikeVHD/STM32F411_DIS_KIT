
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000690  08000698  00010698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000690  08000690  00010698  2**0
                  CONTENTS
  4 .ARM          00000000  08000690  08000690  00010698  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000690  08000698  00010698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000690  08000690  00010690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000694  08000694  00010694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000698  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000698  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010698  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a8b  00000000  00000000  000106c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002b4  00000000  00000000  00011153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00011408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  000114a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013874  00000000  00000000  00011520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001084  00000000  00000000  00024d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dd56  00000000  00000000  00025e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a3b6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000019c  00000000  00000000  000a3bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000678 	.word	0x08000678

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000678 	.word	0x08000678

080001d8 <SysTick_Handler>:

//---------------------------
// DEFINITIONS OF FUNCTIONS
//---------------------------
void SysTick_Handler()
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	sysTickCouter++;
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <SysTick_Handler+0x18>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <SysTick_Handler+0x18>)
 80001e4:	6013      	str	r3, [r2, #0]
}
 80001e6:	bf00      	nop
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	2000001c 	.word	0x2000001c

080001f4 <sysTick_Init>:

void sysTick_Init()
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	uint32_t *CSR = (uint32_t*)0xe000e010;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <sysTick_Init+0x30>)
 80001fc:	607b      	str	r3, [r7, #4]
	uint32_t *RVR = (uint32_t*)0xe000e014;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <sysTick_Init+0x34>)
 8000200:	603b      	str	r3, [r7, #0]

	*RVR = 15999;
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000208:	601a      	str	r2, [r3, #0]
	*CSR |= (1U << 1)|(1U << 0)|(1U << 2);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 0207 	orr.w	r2, r3, #7
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e010 	.word	0xe000e010
 8000228:	e000e014 	.word	0xe000e014

0800022c <custom_Delay>:

void custom_Delay(uint32_t mSec)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
	sysTickCouter = 0;
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <custom_Delay+0x28>)
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
	while (sysTickCouter < mSec);
 800023a:	bf00      	nop
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <custom_Delay+0x28>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	429a      	cmp	r2, r3
 8000244:	d8fa      	bhi.n	800023c <custom_Delay+0x10>
}
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	2000001c 	.word	0x2000001c

08000258 <Custom_SPI_Init>:

void Custom_SPI_Init()
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
	//--------------
	// Cau hinh GPIO
	//--------------

	__HAL_RCC_GPIOA_CLK_ENABLE();	// Cap xung clock cho GPIO cong A
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	4b33      	ldr	r3, [pc, #204]	; (8000330 <Custom_SPI_Init+0xd8>)
 8000264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000266:	4a32      	ldr	r2, [pc, #200]	; (8000330 <Custom_SPI_Init+0xd8>)
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	6313      	str	r3, [r2, #48]	; 0x30
 800026e:	4b30      	ldr	r3, [pc, #192]	; (8000330 <Custom_SPI_Init+0xd8>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000272:	f003 0301 	and.w	r3, r3, #1
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	68fb      	ldr	r3, [r7, #12]
	// Chon chuc nang chuyen tiep cha chan 5, 6, 7 cua cong A
	GPIOA_MODER &= ~((3U << 10U) | (3U << 12U) | (3U << 14U));	// Reset mode at pin 5, 6, 7
 800027a:	4b2e      	ldr	r3, [pc, #184]	; (8000334 <Custom_SPI_Init+0xdc>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a2d      	ldr	r2, [pc, #180]	; (8000334 <Custom_SPI_Init+0xdc>)
 8000280:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000284:	6013      	str	r3, [r2, #0]
	GPIOA_MODER |= ((2U << 10U) | (2U << 12U) | (2U << 14U));
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <Custom_SPI_Init+0xdc>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a2a      	ldr	r2, [pc, #168]	; (8000334 <Custom_SPI_Init+0xdc>)
 800028c:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8000290:	6013      	str	r3, [r2, #0]
	// Cau hinh chan GPIO 5, 6 va 7 tren Port A voi gia tri chuc nang chuyen tiep chan 5 (SPI 1).
	GPIOA_AFRL |= (0x555 << 20);
 8000292:	4b29      	ldr	r3, [pc, #164]	; (8000338 <Custom_SPI_Init+0xe0>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a28      	ldr	r2, [pc, #160]	; (8000338 <Custom_SPI_Init+0xe0>)
 8000298:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800029c:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80002a0:	6013      	str	r3, [r2, #0]

	__HAL_RCC_GPIOE_CLK_ENABLE();	// Cap xung clock cho GPIO cong E
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	4b22      	ldr	r3, [pc, #136]	; (8000330 <Custom_SPI_Init+0xd8>)
 80002a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002aa:	4a21      	ldr	r2, [pc, #132]	; (8000330 <Custom_SPI_Init+0xd8>)
 80002ac:	f043 0310 	orr.w	r3, r3, #16
 80002b0:	6313      	str	r3, [r2, #48]	; 0x30
 80002b2:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <Custom_SPI_Init+0xd8>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	f003 0310 	and.w	r3, r3, #16
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	68bb      	ldr	r3, [r7, #8]
	GPIOE_MODER &= ~(3U << 6U);
 80002be:	4b1f      	ldr	r3, [pc, #124]	; (800033c <Custom_SPI_Init+0xe4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a1e      	ldr	r2, [pc, #120]	; (800033c <Custom_SPI_Init+0xe4>)
 80002c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80002c8:	6013      	str	r3, [r2, #0]
	GPIOE_MODER |= (1U << 6U);
 80002ca:	4b1c      	ldr	r3, [pc, #112]	; (800033c <Custom_SPI_Init+0xe4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a1b      	ldr	r2, [pc, #108]	; (800033c <Custom_SPI_Init+0xe4>)
 80002d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002d4:	6013      	str	r3, [r2, #0]

	SENSOR_INACTIVE;
 80002d6:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <Custom_SPI_Init+0xe8>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a19      	ldr	r2, [pc, #100]	; (8000340 <Custom_SPI_Init+0xe8>)
 80002dc:	f043 0308 	orr.w	r3, r3, #8
 80002e0:	6013      	str	r3, [r2, #0]
	//---------------
	// Khoi tao SPI
	//---------------

	// 1. Bat clock cho SPI 1.
	__HAL_RCC_SPI1_CLK_ENABLE();	// Cap xung clock cho bo SPI 1.
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <Custom_SPI_Init+0xd8>)
 80002e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ea:	4a11      	ldr	r2, [pc, #68]	; (8000330 <Custom_SPI_Init+0xd8>)
 80002ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002f0:	6453      	str	r3, [r2, #68]	; 0x44
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <Custom_SPI_Init+0xd8>)
 80002f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]

	// 2. Thiet lap toc do truyen du lieu.
	SPI1_CR1 |= (4U << 3U);			//100: fPCLK/32
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <Custom_SPI_Init+0xec>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a10      	ldr	r2, [pc, #64]	; (8000344 <Custom_SPI_Init+0xec>)
 8000304:	f043 0320 	orr.w	r3, r3, #32
 8000308:	6013      	str	r3, [r2, #0]

	// 3. Thiet lap module SPI1 lam chu (Set bit MSTR trong thanh ghi CR1).
	SPI1_CR1 |= (1U << 2U);
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <Custom_SPI_Init+0xec>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <Custom_SPI_Init+0xec>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	6013      	str	r3, [r2, #0]

	// 4. Thiet lap su dung che do dieu khien slave (software slave management mode).
    //	  Set bit SSM (Software Slave Management), bit SSI (Internal Slave Select) và bit SPE (SPI Enable) trong thanh ghi CR1.
	SPI1_CR1 |= (1U << 9U) | (1U << 8U) | (1U << 6);
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <Custom_SPI_Init+0xec>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <Custom_SPI_Init+0xec>)
 800031c:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 8000320:	6013      	str	r3, [r2, #0]

}
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40020000 	.word	0x40020000
 8000338:	40020020 	.word	0x40020020
 800033c:	40021000 	.word	0x40021000
 8000340:	40021014 	.word	0x40021014
 8000344:	40013000 	.word	0x40013000

08000348 <Custom_SPI_Sensor_Read>:

uint8_t Custom_SPI_Sensor_Read(uint8_t cmd)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	SENSOR_ACTIVE;						// Active Sensor
 8000352:	4b31      	ldr	r3, [pc, #196]	; (8000418 <Custom_SPI_Sensor_Read+0xd0>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a30      	ldr	r2, [pc, #192]	; (8000418 <Custom_SPI_Sensor_Read+0xd0>)
 8000358:	f023 0308 	bic.w	r3, r3, #8
 800035c:	6013      	str	r3, [r2, #0]

	while (SPI_BSY_FLAG);				// Cho o day den duong truyen ranh
 800035e:	bf00      	nop
 8000360:	4b2e      	ldr	r3, [pc, #184]	; (800041c <Custom_SPI_Sensor_Read+0xd4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	09db      	lsrs	r3, r3, #7
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1f8      	bne.n	8000360 <Custom_SPI_Sensor_Read+0x18>
	uint8_t dataSend = cmd | (1 << 7);	// Chuan bi lenh doc sensor
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000374:	73fb      	strb	r3, [r7, #15]
	SPI1_DR = dataSend;					// Gui lenh doc
 8000376:	4a2a      	ldr	r2, [pc, #168]	; (8000420 <Custom_SPI_Sensor_Read+0xd8>)
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	6013      	str	r3, [r2, #0]
	while (!SPI_TXE_FLAG);				// Cho o day den khi gui xong lenh
 800037c:	bf00      	nop
 800037e:	4b27      	ldr	r3, [pc, #156]	; (800041c <Custom_SPI_Sensor_Read+0xd4>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	085b      	lsrs	r3, r3, #1
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0f8      	beq.n	800037e <Custom_SPI_Sensor_Read+0x36>
	while (!SPI_RXNE_FLAG);				// Cho den khi Rx buff co du lieu
 800038c:	bf00      	nop
 800038e:	4b23      	ldr	r3, [pc, #140]	; (800041c <Custom_SPI_Sensor_Read+0xd4>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <Custom_SPI_Sensor_Read+0x46>
	while (SPI_BSY_FLAG);				// Cho den khi nhan xong du lieu
 800039a:	bf00      	nop
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <Custom_SPI_Sensor_Read+0xd4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	09db      	lsrs	r3, r3, #7
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d1f8      	bne.n	800039c <Custom_SPI_Sensor_Read+0x54>

	uint32_t tempData = SPI1_DR;		// Doc du lieu de Clear spam data (sau lenh nay RXNE bit = 0)
 80003aa:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <Custom_SPI_Sensor_Read+0xd8>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	60bb      	str	r3, [r7, #8]

	while (SPI_BSY_FLAG);				// Cho duong truyen ranh
 80003b0:	bf00      	nop
 80003b2:	4b1a      	ldr	r3, [pc, #104]	; (800041c <Custom_SPI_Sensor_Read+0xd4>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	09db      	lsrs	r3, r3, #7
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d1f8      	bne.n	80003b2 <Custom_SPI_Sensor_Read+0x6a>
	SPI1_DR = 0x00;						// Gui du lieu gia de tao ra clock
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <Custom_SPI_Sensor_Read+0xd8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
	while (!SPI_TXE_FLAG);				// Cho gui xong (Tx empty)
 80003c6:	bf00      	nop
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <Custom_SPI_Sensor_Read+0xd4>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	085b      	lsrs	r3, r3, #1
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0f8      	beq.n	80003c8 <Custom_SPI_Sensor_Read+0x80>
	while (!SPI_RXNE_FLAG);				// Cho nhan du lieu
 80003d6:	bf00      	nop
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <Custom_SPI_Sensor_Read+0xd4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f9      	beq.n	80003d8 <Custom_SPI_Sensor_Read+0x90>
	while (SPI_BSY_FLAG);				// Cho duong truyen ranh (nhan xong)
 80003e4:	bf00      	nop
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <Custom_SPI_Sensor_Read+0xd4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	09db      	lsrs	r3, r3, #7
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d1f8      	bne.n	80003e6 <Custom_SPI_Sensor_Read+0x9e>

	tempData = SPI1_DR;					// Doc du lieu
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <Custom_SPI_Sensor_Read+0xd8>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	60bb      	str	r3, [r7, #8]
	SENSOR_INACTIVE;
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <Custom_SPI_Sensor_Read+0xd0>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a06      	ldr	r2, [pc, #24]	; (8000418 <Custom_SPI_Sensor_Read+0xd0>)
 8000400:	f043 0308 	orr.w	r3, r3, #8
 8000404:	6013      	str	r3, [r2, #0]
	return tempData;
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	b2db      	uxtb	r3, r3
}
 800040a:	4618      	mov	r0, r3
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40021014 	.word	0x40021014
 800041c:	40013008 	.word	0x40013008
 8000420:	4001300c 	.word	0x4001300c

08000424 <Custom_SPI_Sensor_Write>:

void Custom_SPI_Sensor_Write(uint8_t data, uint8_t addr)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	460a      	mov	r2, r1
 800042e:	71fb      	strb	r3, [r7, #7]
 8000430:	4613      	mov	r3, r2
 8000432:	71bb      	strb	r3, [r7, #6]
	SENSOR_ACTIVE;						// Active Sensor
 8000434:	4b2f      	ldr	r3, [pc, #188]	; (80004f4 <Custom_SPI_Sensor_Write+0xd0>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a2e      	ldr	r2, [pc, #184]	; (80004f4 <Custom_SPI_Sensor_Write+0xd0>)
 800043a:	f023 0308 	bic.w	r3, r3, #8
 800043e:	6013      	str	r3, [r2, #0]

	while (SPI_BSY_FLAG);				// Cho o day den duong truyen ranh
 8000440:	bf00      	nop
 8000442:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <Custom_SPI_Sensor_Write+0xd4>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	09db      	lsrs	r3, r3, #7
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f8      	bne.n	8000442 <Custom_SPI_Sensor_Write+0x1e>
	uint8_t dataSend = addr;			// Chuan bi lenh ghi sensor
 8000450:	79bb      	ldrb	r3, [r7, #6]
 8000452:	73fb      	strb	r3, [r7, #15]
	SPI1_DR = dataSend;					// Gui dia chi
 8000454:	4a29      	ldr	r2, [pc, #164]	; (80004fc <Custom_SPI_Sensor_Write+0xd8>)
 8000456:	7bfb      	ldrb	r3, [r7, #15]
 8000458:	6013      	str	r3, [r2, #0]
	while (!SPI_TXE_FLAG);				// Cho o day den khi gui xong lenh
 800045a:	bf00      	nop
 800045c:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <Custom_SPI_Sensor_Write+0xd4>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	085b      	lsrs	r3, r3, #1
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	2b00      	cmp	r3, #0
 8000468:	d0f8      	beq.n	800045c <Custom_SPI_Sensor_Write+0x38>
	while (!SPI_RXNE_FLAG);				// Cho den khi Rx buff co du lieu
 800046a:	bf00      	nop
 800046c:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <Custom_SPI_Sensor_Write+0xd4>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0f9      	beq.n	800046c <Custom_SPI_Sensor_Write+0x48>
	while (SPI_BSY_FLAG);				// Cho den khi nhan xong du lieu
 8000478:	bf00      	nop
 800047a:	4b1f      	ldr	r3, [pc, #124]	; (80004f8 <Custom_SPI_Sensor_Write+0xd4>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	09db      	lsrs	r3, r3, #7
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1f8      	bne.n	800047a <Custom_SPI_Sensor_Write+0x56>

	uint32_t tempData = SPI1_DR;		// Doc du lieu de Clear spam data (sau lenh nay RXNE bit = 0)
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <Custom_SPI_Sensor_Write+0xd8>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	60bb      	str	r3, [r7, #8]

	while (SPI_BSY_FLAG);				// Cho o day den duong truyen ranh
 800048e:	bf00      	nop
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <Custom_SPI_Sensor_Write+0xd4>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	09db      	lsrs	r3, r3, #7
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	2b00      	cmp	r3, #0
 800049c:	d1f8      	bne.n	8000490 <Custom_SPI_Sensor_Write+0x6c>
	dataSend = data;					// Chuan bi lenh ghi sensor
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	73fb      	strb	r3, [r7, #15]
	SPI1_DR = dataSend;					// Gui data
 80004a2:	4a16      	ldr	r2, [pc, #88]	; (80004fc <Custom_SPI_Sensor_Write+0xd8>)
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	6013      	str	r3, [r2, #0]
	while (!SPI_TXE_FLAG);				// Cho o day den khi gui xong lenh
 80004a8:	bf00      	nop
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <Custom_SPI_Sensor_Write+0xd4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	085b      	lsrs	r3, r3, #1
 80004b0:	f003 0301 	and.w	r3, r3, #1
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0f8      	beq.n	80004aa <Custom_SPI_Sensor_Write+0x86>
	while (!SPI_RXNE_FLAG);				// Cho den khi Rx buff co du lieu
 80004b8:	bf00      	nop
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <Custom_SPI_Sensor_Write+0xd4>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f9      	beq.n	80004ba <Custom_SPI_Sensor_Write+0x96>
	while (SPI_BSY_FLAG);				// Cho den khi nhan xong du lieu
 80004c6:	bf00      	nop
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <Custom_SPI_Sensor_Write+0xd4>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	09db      	lsrs	r3, r3, #7
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d1f8      	bne.n	80004c8 <Custom_SPI_Sensor_Write+0xa4>

	tempData = SPI1_DR;					// Doc du lieu de Clear spam data (sau lenh nay RXNE bit = 0)
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <Custom_SPI_Sensor_Write+0xd8>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	60bb      	str	r3, [r7, #8]

	SENSOR_INACTIVE;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <Custom_SPI_Sensor_Write+0xd0>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <Custom_SPI_Sensor_Write+0xd0>)
 80004e2:	f043 0308 	orr.w	r3, r3, #8
 80004e6:	6013      	str	r3, [r2, #0]
}
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40021014 	.word	0x40021014
 80004f8:	40013008 	.word	0x40013008
 80004fc:	4001300c 	.word	0x4001300c

08000500 <main>:
//---------------------------
// MAIN PROGRAM
//---------------------------

int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
	sysTick_Init();
 8000506:	f7ff fe75 	bl	80001f4 <sysTick_Init>
	Custom_SPI_Init();
 800050a:	f7ff fea5 	bl	8000258 <Custom_SPI_Init>
	uint8_t index = Custom_SPI_Sensor_Read(0x20);
 800050e:	2020      	movs	r0, #32
 8000510:	f7ff ff1a 	bl	8000348 <Custom_SPI_Sensor_Read>
 8000514:	4603      	mov	r3, r0
 8000516:	71fb      	strb	r3, [r7, #7]
	Custom_SPI_Sensor_Write(0x0F, 0x20);
 8000518:	2120      	movs	r1, #32
 800051a:	200f      	movs	r0, #15
 800051c:	f7ff ff82 	bl	8000424 <Custom_SPI_Sensor_Write>
	index = Custom_SPI_Sensor_Read(0x20);
 8000520:	2020      	movs	r0, #32
 8000522:	f7ff ff11 	bl	8000348 <Custom_SPI_Sensor_Read>
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]

//	id = Custom_SPI_Sensor_Read(0x20);

	while (1)
	{
		uint8_t x_Low = Custom_SPI_Sensor_Read(0x28);
 800052a:	2028      	movs	r0, #40	; 0x28
 800052c:	f7ff ff0c 	bl	8000348 <Custom_SPI_Sensor_Read>
 8000530:	4603      	mov	r3, r0
 8000532:	71bb      	strb	r3, [r7, #6]
		uint8_t x_High = Custom_SPI_Sensor_Read(0x29);
 8000534:	2029      	movs	r0, #41	; 0x29
 8000536:	f7ff ff07 	bl	8000348 <Custom_SPI_Sensor_Read>
 800053a:	4603      	mov	r3, r0
 800053c:	717b      	strb	r3, [r7, #5]
		uint8_t y_Low = Custom_SPI_Sensor_Read(0x2A);
 800053e:	202a      	movs	r0, #42	; 0x2a
 8000540:	f7ff ff02 	bl	8000348 <Custom_SPI_Sensor_Read>
 8000544:	4603      	mov	r3, r0
 8000546:	713b      	strb	r3, [r7, #4]
		uint8_t y_High = Custom_SPI_Sensor_Read(0x2B);
 8000548:	202b      	movs	r0, #43	; 0x2b
 800054a:	f7ff fefd 	bl	8000348 <Custom_SPI_Sensor_Read>
 800054e:	4603      	mov	r3, r0
 8000550:	70fb      	strb	r3, [r7, #3]
		uint8_t z_Low = Custom_SPI_Sensor_Read(0x2C);
 8000552:	202c      	movs	r0, #44	; 0x2c
 8000554:	f7ff fef8 	bl	8000348 <Custom_SPI_Sensor_Read>
 8000558:	4603      	mov	r3, r0
 800055a:	70bb      	strb	r3, [r7, #2]
		uint8_t z_High = Custom_SPI_Sensor_Read(0x2D);
 800055c:	202d      	movs	r0, #45	; 0x2d
 800055e:	f7ff fef3 	bl	8000348 <Custom_SPI_Sensor_Read>
 8000562:	4603      	mov	r3, r0
 8000564:	707b      	strb	r3, [r7, #1]

		x_Axis = x_Low | (x_High << 8);
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	b21a      	sxth	r2, r3
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	021b      	lsls	r3, r3, #8
 800056e:	b21b      	sxth	r3, r3
 8000570:	4313      	orrs	r3, r2
 8000572:	b21b      	sxth	r3, r3
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <main+0xac>)
 8000578:	801a      	strh	r2, [r3, #0]
		y_Axis = y_Low | (y_High << 8);
 800057a:	793b      	ldrb	r3, [r7, #4]
 800057c:	b21a      	sxth	r2, r3
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	021b      	lsls	r3, r3, #8
 8000582:	b21b      	sxth	r3, r3
 8000584:	4313      	orrs	r3, r2
 8000586:	b21b      	sxth	r3, r3
 8000588:	b29a      	uxth	r2, r3
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <main+0xb0>)
 800058c:	801a      	strh	r2, [r3, #0]
		z_Axis = z_Low | (z_High << 8);
 800058e:	78bb      	ldrb	r3, [r7, #2]
 8000590:	b21a      	sxth	r2, r3
 8000592:	787b      	ldrb	r3, [r7, #1]
 8000594:	021b      	lsls	r3, r3, #8
 8000596:	b21b      	sxth	r3, r3
 8000598:	4313      	orrs	r3, r2
 800059a:	b21b      	sxth	r3, r3
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <main+0xb4>)
 80005a0:	801a      	strh	r2, [r3, #0]
		custom_Delay(500);
 80005a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a6:	f7ff fe41 	bl	800022c <custom_Delay>
	{
 80005aa:	e7be      	b.n	800052a <main+0x2a>
 80005ac:	20000020 	.word	0x20000020
 80005b0:	20000022 	.word	0x20000022
 80005b4:	20000024 	.word	0x20000024

080005b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <SystemInit+0x20>)
 80005be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <SystemInit+0x20>)
 80005c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005e2:	490e      	ldr	r1, [pc, #56]	; (800061c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005f8:	4c0b      	ldr	r4, [pc, #44]	; (8000628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000606:	f7ff ffd7 	bl	80005b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800060a:	f000 f811 	bl	8000630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800060e:	f7ff ff77 	bl	8000500 <main>
  bx  lr    
 8000612:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000620:	08000698 	.word	0x08000698
  ldr r2, =_sbss
 8000624:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000628:	20000028 	.word	0x20000028

0800062c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC_IRQHandler>
	...

08000630 <__libc_init_array>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	4d0d      	ldr	r5, [pc, #52]	; (8000668 <__libc_init_array+0x38>)
 8000634:	4c0d      	ldr	r4, [pc, #52]	; (800066c <__libc_init_array+0x3c>)
 8000636:	1b64      	subs	r4, r4, r5
 8000638:	10a4      	asrs	r4, r4, #2
 800063a:	2600      	movs	r6, #0
 800063c:	42a6      	cmp	r6, r4
 800063e:	d109      	bne.n	8000654 <__libc_init_array+0x24>
 8000640:	4d0b      	ldr	r5, [pc, #44]	; (8000670 <__libc_init_array+0x40>)
 8000642:	4c0c      	ldr	r4, [pc, #48]	; (8000674 <__libc_init_array+0x44>)
 8000644:	f000 f818 	bl	8000678 <_init>
 8000648:	1b64      	subs	r4, r4, r5
 800064a:	10a4      	asrs	r4, r4, #2
 800064c:	2600      	movs	r6, #0
 800064e:	42a6      	cmp	r6, r4
 8000650:	d105      	bne.n	800065e <__libc_init_array+0x2e>
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f855 3b04 	ldr.w	r3, [r5], #4
 8000658:	4798      	blx	r3
 800065a:	3601      	adds	r6, #1
 800065c:	e7ee      	b.n	800063c <__libc_init_array+0xc>
 800065e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000662:	4798      	blx	r3
 8000664:	3601      	adds	r6, #1
 8000666:	e7f2      	b.n	800064e <__libc_init_array+0x1e>
 8000668:	08000690 	.word	0x08000690
 800066c:	08000690 	.word	0x08000690
 8000670:	08000690 	.word	0x08000690
 8000674:	08000694 	.word	0x08000694

08000678 <_init>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	bf00      	nop
 800067c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067e:	bc08      	pop	{r3}
 8000680:	469e      	mov	lr, r3
 8000682:	4770      	bx	lr

08000684 <_fini>:
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000686:	bf00      	nop
 8000688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068a:	bc08      	pop	{r3}
 800068c:	469e      	mov	lr, r3
 800068e:	4770      	bx	lr
