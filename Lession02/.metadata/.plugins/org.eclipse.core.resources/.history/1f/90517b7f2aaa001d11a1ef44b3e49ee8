/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum
{
	LED0, LED1, LED2, LED3
}LED_NUMBER_t;

typedef enum
{
	LED_OFF, LED_ON
}LED_STATE_t;

typedef enum
{
	pBRelease, pBPress
}PB_STATE;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define LED_GREEN	(1U << 12)
#define LED_ORANGE	(1U << 13)
#define LED_RED		(1U << 14)
#define LED_BLUE	(1U << 15)
#define BUTTON		(*((uint32_t*)(0x40020000 + 0x10)) & 1U)
#define GPIOD_MODER		*((uint32_t*)(0x40020C00 + 0x00))	// GPIO port D mode select register
#define GPIOD_OTYPER	*((uint32_t*)(0x40020C00 + 0x04))	// GPIO port D output type register
#define GPIOD_ODR		*((uint32_t*)(0x40020C00 + 0x14))	// GPIO port D output data register

#define GPIOA_MODER		*((uint32_t*)(0x40020000 + 0x00))	// GPIO port A mode select register
#define GPIOA_IDR		*((uint32_t*)(0x40020000 + 0x10))	// GPIO port A input data register
#define GPIOA_PUPDR		*((uint32_t*)(0x40020000 + 0x0C))	// GPIO port A pull-up/pull-down register

#define EXTI0_RTSR		*((uint32_t*)(0x40013C00 + 0x08))	// Rising trigger selection register
#define EXTI0_IMR		*((uint32_t*)(0x40013C00 + 0x00))	// Interrupt mask register

#define NVIC_ISER0		*((uint32_t*)(0xE000E100 + 0x100)	//Interrupt set-enable register 0
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ledInit()
{
	__HAL_RCC_GPIOD_CLK_ENABLE();		// Enable clock for GPIOD
	/*
	 * to do:
	 * set PD12, PD13, PD14, PD15 in OUTPUT MODE (push-pull)
	 */
	GPIOD_MODER &= ~(0xFF << 24);		// Clear
	GPIOD_MODER |= (0b01 << 24) | (0b01 << 26) | (0b01 << 28) | (0b01 << 30);

	GPIOD_OTYPER &= ~(0b1111 << 12);
}

void ledCtrl(LED_NUMBER_t ledNumber, LED_STATE_t ledState)
{
//	uint32_t *GPIOD_ODR	= (uint32_t*)(0x40020C00 + 0x14);
	if(ledState == LED_ON)
	{
		GPIOD_ODR |= LED_GREEN << ledNumber;
	}
	else
	{
		GPIOD_ODR &= ~(LED_GREEN << ledNumber);
	}
}

void buttonInit()
{
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable clock for GPIOA
	/*
	 * to do:
	 * set PA0 is input (no pull up no pull down)
	 */
	GPIOA_MODER &= ~(3U);		// PA0 as input
	GPIOA_PUPDR &= ~(3U);		// No pull up, no pull down

}

void extiOInit()
{
	EXTI0_RTSR = 1U << 0;
	EXTI0_IMR = 1U << 0;
	NVIC_ISER0 = 1U << 6;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  ledInit();
  buttonInit();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(BUTTON == pBPress)
		  ledCtrl(LED3, LED_ON);
	  else
	  {
		  ledCtrl(LED3, LED_OFF);
		  ledCtrl(LED1, LED_ON);
		  ledCtrl(LED2, LED_ON);
		  ledCtrl(LED0, LED_OFF);
	  }
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
